1st lec.

What is Scripting Language?
It is loosely or weakly typed or light weight programming. Scripts are becoming more popular due to the emergence of web-based applications. 

Advantages of Scripting Languages:
1 Easy to learn and use
2 Minimum programming knowledge or experience required
3 Allow complex tasks to be performed in relatively few steps
4 Editing and running code is fast.

Limitations of Scripting Languages:
1. Because of code executes on the users computer, in some cases it can be exploited for malicious purposes. (Security Issues)
2. Not always able to work across different browsers. (Inconsistant)

Types of Scripts:
Scripts are Classified into the following two types:
1. Client Side Scripts
2. Server Side Scripts

1. Client Side Scripts
The script which is running within the browser is called as client side scripting.
Example:
1. Live Script
2. JavaScript 
3. Type Script
4. VB Script
5. AJAX (Asynchronous Javascript and XML)
6. HTML/DHTML/CSS
7. Dart (Google)
8. Brython

2. Server Side Scripts
The Script which is running within the web server is called as server side scripting. 
Example:
PYTHON ==> Simple HTTP Server (NO-1),WSGI
ASP ==>IIS (Internet Information Services)
JSP ==>Apache Tomcat, Sun Java System Web Server, Nginx
PHP ==> Apache http,Nginx,WampServer
RUBY==> Puma, WebRick,Unicorn
NodeJS ==> Server Side Java Script, Apache, IIS

What is JavaScript? Who Developed?
JavaScript is the world's most popular programming language.JavaScript is the programming language of the Web. JavaScript is easy to learn. It was created by Brendan Eich at Netscape in December 1995 under the name of LiveScript. JavaScript’s official name is ECMAScript.
(European Computer Manufacturer's Association). JavaScript became an ECMA standard (ECMA-262/ES1)

Why Study JavaScript?
JavaScript is one of the 3 languages all web developers must learn:
1. HTML to define the content of web pages
2. CSS to specify the layout of web pages
3. JavaScript to program the behavior of web pages

Every version of JavaScript:
1 The Original JavaScript ES1 ES2 ES3 (1997-1999)
2 The First Main Revision ES5-ECMAScript (2009)
3 The Second Revision ES6- ECMAScript (2015)
4 The Yearly Additions (2016, 2017) 
5. ECMAScript 2016/2017 was not called ES7/ES8

Features of JavaScript
1. It gives HTML designers a programming tool 
2. JavaScript can react to events 
3. Detecting the user's browser, OS, screen size,etc..!!
4. JavaScript can be used to validate data 
5. Open and cross-platform

What JavaScript can Do?
1. JavaScript Can Change HTML Content
2. JavaScript Can Change HTML Attribute Values
3. JavaScript Can Change HTML Styles (CSS)
4. JavaScript Can Hide HTML Elements
5. JavaScript Can Show HTML Elements

Code editors:
A code editor is the place where programmers spend most of their time. There are two main types of code editors: IDEs and lightweight editors.

IDE:
Integrated Development Environment refers to a powerful editor with many features that usually operates on a “whole project.” It is a full-scale “development environment.”
1 Visual Studio Code (cross-platform, free).
2 WebStorm (cross-platform, paid).

Lightweight Editors:
"Lightweight Editors" are not as powerful as IDEs, but they’re fast, elegant and simple.
1 Atom (cross-platform, free).
2 Sublime Text (cross-platform, shareware).
3 Notepad++ (Windows, free).
4 Vim and Emacs are also cool if you know how to use them.

JavaScript Syntax:
JavaScript consists of JavaScript statements that are placed within the following:

Syntax1:
<script type="text/javascript" language="javascript">
Statements;
Statements;
Statements;
</script> 

Syntax2:
<script language="javascript">
Statements;
Statements;
Statements;
</script> 

Syntax3:
<script>
Statements;
Statements;
Statements;
</script> 

Example:
<!DOCTYPE html>
<head>
<script>
document.write("Welcome to JavaScript"); 
</script>
</head>

Example:
<!DOCTYPE html>
<head>
<script>
document.write("Welcome to LiveScript"); 
document.write("Welcome to JavaScript"); 
</script>
</head>

Example:
<!DOCTYPE html>
<head>
<script>
document.write("Welcome to LiveScript"); 
document.write("<br/>")
document.write("Welcome to JavaScript"); 
</script>
</head>

Single and Double quotes in JavaScript
You can write the above code with single quotes too and it will give the same result. However, if the text contains double quotes that have to be displayed, you should use single quotes to surround the text as in:

Example:
<!doctype html>
<head>
<script>
document.write("Welcome to JavaScript"); 
document.write("<br/>"); 
document.write('Welcome to JavaScript'); 
</script>
</head>

Example:
<!doctype html>
<head>
<script>
document.write("Welcome to JavaScript"); 
document.write("<br/>"); 
document.write('Welcome to JavaScript'); 
document.write("<br/>"); 
document.write("Welcome to 'Java' Script"); 
document.write("<br/>"); 
document.write('Welcome to "Java" Script'); 
</script>
</head>

Example:
<!doctype html>
<head>
<script>
document.write("Welcome to "Java" Script"); 
document.write("<br/>"); 
document.write('Welcome to 'Java' Script'); 
</script>
</head>

Example:
<!doctype html>
<head>
<script>
document.write("Welcome to \"Java\" Script"); 
document.write("<br/>"); 
document.write('Welcome to \'Java\' Script'); 
</script>
</head>
<--------------------------------------------->

<--------------2nd------------------------>

Difference between document.write() and window.document.write()
There is no difference between the two. Remember, the window object is the highest level object. It can contain other objects and their methods. Hence, document is a object contained inside the window object; write() is a method of the document object .

Example:
<!doctype html>
<head>
<script>
window.document.write("Welcome to JavaScript")
document.write("<br>")
document.write("Good Bye...!!")
</script>
</head>

JavaScript Output:
JavaScript can "display" data in different ways:
1 Writing into the HTML output using document.write().
2 Writing into an HTML element, using innerHTML.
3 Writing into an alert box, using window.alert().
4 Writing into the browser console, using console.log().

Writing into the HTML output using document.write().
The write() method writes HTML expressions or JavaScript code to a document.

Syntax
document.write(exp1,exp2,exp3,...)

Example:
<!doctype html>
<body>
<script type='text/javascript'>
document.write("<h1>Hello World!</h1><p>Have a nice day!</p>");
</script>
</body>
 
Document writeln() Method
The writeln() method is identical to the write() method, with the addition of writing a new space character after each statement.

Syntax
document.writeln(exp1,exp2,exp3,...)

Example:
<!doctype html>
<body>
<pre>
<script type='text/javascript'>
document.write("Hello World!");
document.write("Have a nice day!");
</script>
</pre>
<pre>
<script type='text/javascript'>
document.writeln("Hello World!");
document.writeln("Have a nice day!");
</script>
</pre>
</body>

Using innerHTML
To access an HTML element, JavaScript can use the document.getElementById(id) method.
The id attribute defines the HTML element. The innerHTML property defines the HTML content.

Syntax:
document.getElementById().innerHTML

Example:
<!DOCTYPE html>
<body>
<p id="txt"></p>
<script type='text/javascript'>
document.getElementById("txt").innerHTML = "JS is Perfect";
</script>
</body>

3 Writing into an alert box, using window.alert().
You can use an alert box to display data

Syntax:
window.alert("Msg")

Example:
<!DOCTYPE html>
<body>
<script type='text/javascript'>
window.alert("PleaseEnterRequiredInput");
</script>
</body>

NOTE:
The window object is the global scope object, that means that variables, properties, and methods by default belong to the window object. Window keyword is optional.

Example:
<!DOCTYPE html>
<body>
<script type='text/javascript'>
alert("PleaseEnterRequiredInput");
</script>
</body>

4 Writing into the browser console, using console.log().
For debugging purposes, you can call the console.log() method in the browser to display data.

Syntax:
console.log(Msg)

Example:
<!DOCTYPE html>
<body>
<script>
console.log(51 + 16);
</script>
</body>

JavaScript Statements
A JavaScript program is a list of logical statements. In HTML, JavaScript programs are executed by the web browser. JavaScript statements are composed of Values, Operators, Expressions, Keywords, and Comments.

Example:
<!DOCTYPE html>
<body>
<p id="msg"></p>
<script type='text/javascript'>
document.getElementById("msg").innerHTML = "Hello Raju Sir.";
</script>
</body>

JavaScript Code
JavaScript code is a sequence of JavaScript statements. Each statement is executed by the browser in the sequence they are written.

This example will write a heading and two paragraphs to a web page:
Example
<!doctype html>
<head>
<script type="text/javascript">
document.write("<h1>This is a heading</h1>");
document.write("<p>This is a paragraph.</p>");
</script> 
</head>

JavaScript Blocks
JavaScript statements can be grouped together in blocks. Blocks start with a left curly bracket {, and end with a right curly bracket }. The purpose of a block is to make the sequence of statements execute together. 

This example will write a heading and two paragraphs to a web page:
Example
<!doctype html>
<head>
<script type="text/javascript">
{
document.write("<h1>This is a heading</h1>");
document.write("<p>This is a paragraph.</p>");
document.write("<p>This is another paragraph.</p>");
}
</script>
</head>

Comments in JAVASCRIPT:
Comments are non-executable statements or ignore statements. Comments are using to declare customize statements or user defined statements within the source code.

In JavaScript comments are classified into the following types.
1. Single line comments
2. Multiline comments

1. Single line comments
These comments are applicable to a specific line or statement. It is always denoted with (//) double forward slash.

Syntax:
// This is a comment

Example:
<!doctype html>
<head>
<script type='text/javascript'>
//document.write("Hello Comment");
//document.write("Thank U");
</script>
</head>

O/P: Blank Page

2. Multiline comments:
These comments are applicable one or more lines. It is always denoted with /* */ 

Syntax:
/* 
Statements
Statements
*/

Example:
<!doctype html>
<head>
<script>
/* document.write("Welcome to JS");
document.write("Thank U");
document.write("Good Bye"); */
</script>
</head>

JavaScript Values
The JavaScript syntax defines two types of values:
Fixed values => Fixed values are called Literals/Constants.
Variable values => Variable values are called Variables/Identifier.

JavaScript Literals
1. Numbers are written with or without decimals:
10.50; 1001

Example:
<!DOCTYPE html>
<body>
<script>
var a=10
document.write("The Value is: "+a +"<br>")
var a=9.99
document.write("The Value is: "+a)
</script>
</body>

2. Strings are text, written within double or single quotes:
"JavaScrpt"; 'JavaScript'

JavaScript Variables
In a programming language, variables are used to store data values. JavaScript uses the var keyword to declare variables. An equal sign is used to assign values to variables.
Example:
<!DOCTYPE html>
<body>
<h2>JavaScript Variables</h2>
<script>
var x; x = 6;
document.write("The Value is: "+x +"<br>")
</script>
</body>


JavaScript and Camel Case
Programmers have used different ways of joining multiple words into one variable name:

Hyphens:
first-name, last-name, master-card, inter-city.

Underscore:
first_name, last_name, master_card, inter_city.

Upper Camel Case (Pascal Case):
FirstName, LastName, MasterCard, InterCity.

Lower Camel Case:
JavaScript programmers tend to use camel case that starts with a lowercase letter:
firstName, lastName, masterCard, interCity.

Semicolons are Optional:
Simple statements in JavaScript are generally followed by a semicolon character.

Example:
<!doctype html>
<script> 
var1 = 10 
var2 = 20 
</script>

Example:
<!doctype html>
<script> 
var1 = 10; var2 = 20; 
</script>

Example:
<!DOCTYPE html>
<body>
<script>
document.write("Hello Welcome to JS");document.write("Hello Welcome to JS")
</script>
</body>

Note: It is a good programming practice to use semicolons.

JavaScript White Space
JavaScript ignores multiple spaces. You can add white space to your script to make it more readable.

Example:
<!DOCTYPE html>
<body>
<script>
var Name =  "RajuSir";
var Name="RajuSir"; 
</script>
</body>

JavaScript is Case Sensitive
A function named "myfunction" is not the same as "myFunction" and a variable named "myVar" is not the same as "myvar".

Example:
<!DOCTYPE html>
<body>
<script>
var a=10;A=100;b=1;B=100
document.write(a+A)
document.write("<br/>")
document.write(b-B)
</script>
</body>

JavaScript Place in HTML File:
There is a flexibility given to include JavaScript code anywhere in  HTML document. But there are following most preferred ways to include JavaScript in your HTML file.
1. Script in <head>...</head> section.
2. Script in <body>...</body> section.
3. Script in <body>...</body> and <head>...</head> sections.
4. Script in and external file and then include in  <head>...</head> section.

Using an External JavaScript
JavaScript can also be placed in external files. External JavaScript files often contain code to be used on several different web pages. External JavaScript files have the file extension .js.

NOTE:
External script cannot contain the <script></script> tags!

NOTE:
To use an external script, point to the .js file in the "src" attribute of the <script> tag:

1. Step1 --> Create JavaScript File
document.write("<h1>Wecome to JS External Programming!!</h1>");
document.write("<b>Bye...!!");  

Save with myscript.js Extension....!!

2. Step2 --> Create HTML file
<html>
<head>
<script type="text/javascript" src="myscript.js"></script>
</head>
<body>
</body>
</html>
<------------------------------------------------->

<----------------------3rd---------------------->

JavaScript Place in HTML File:
There is a flexibility given to include JavaScript code anywhere in  HTML document. But there are following most preferred ways to include JavaScript in your HTML file.
1. Script in <head>...</head> section.
2. Script in <body>...</body> section.
3. Script in <body>...</body> and <head>...</head> sections.
4. Script in and external file and then include in  <head>...</head> section.

Using an External JavaScript
JavaScript can also be placed in external files. External JavaScript files often contain code to be used on several different web pages. External JavaScript files have the file extension .js.

NOTE:
External script cannot contain the <script></script> tags!

NOTE:
To use an external script, point to the .js file in the "src" attribute of the <script> tag:

1. Step1 --> Create JavaScript File
document.write("<h1>Wecome to JS External Programming!!</h1>");
document.write("<b>Bye...!!");  

Save with myscript.js Extension....!!

2. Step2 --> Create HTML file
<html>
<head>
<script type="text/javascript" src="myscript.js"></script>
</head>
<body>
</body>
</html>

JavaScript Popup Boxes
JavaScript has three kind of popup boxes: 
1. Alert box
2. Confirm box
3. Prompt box.

Alert Box
An alert box is often used if you want to make sure information comes through the user. When an alert box pops up, the user will have to click "OK" to proceed. 

Syntax
alert("Message");

Example:
<html>
<head>
<title>Alert box</title>
<script type="text/javascript">
alert("Click OK to Proceed");
alert("Naresh i Technologies");
</script>
</head>
<body>
</body>
</html>

How to write text on multiple lines in an alert box?
We can't use the <br> tag here, as we did in write(), because alert() is a method of the window object that cannot interpret HTML tags. Instead we use the new line escape character.

Escape characters in JavaScript:
Escape characters are characters that can be interpreted in some alternate way then what we intended to. To print these characters as it is, include backslash ‘\’ in front of them.
Code	Result
\b	Backspace
\f	Form Feed
\n	New Line
\r	Carriage Return
\t	Horizontal Tabulator
\v	Vertical Tabulator
\\	Backslash

Example:
<script>
alert("JavaScript\nis\na\nclient-side\nprogramming\nlanguage");
</script>

Example:
<script>
alert("1\n\t2\n\t\t3");
</script>

Example:
<html>
<head>
<script type="text/javascript">
function show_alert()
{
alert("I am an alert box!");
}
</script>
</head>
<body>
<input type="submit" onclick="show_alert()" value="Show alert box" />
</body>
</html>

Confirm Box:
A confirm box is often used if you want the user to verify or accept something. When a confirm box pops up, the user will have to click either "OK" or "Cancel" to proceed. If the user clicks "OK", the box returns true. If the user clicks "Cancel", the box returns false.

Syntax
confirm("Message");

Example:
<html>
<head>
<title>Confirm box</title>
<script type="text/javascript">
confirm("Click OK or Cancel");
</script>
</head>
<body>
</body>
</html>

Example:
<script>
xyz=confirm("Select OK or Cancel");
if (xyz==true)
{
alert("u selected OK");
}
else
{
alert("u selected cancel");
}
</script>
<body>
</body>

Example:
<html>
<head>
<script type="text/javascript">
function show_confirm()
{
var r=confirm("Press a button");
if (r==true)
  {
  alert("You pressed OK!");
  }
else
  {
  alert("You pressed Cancel!");
  }
}
</script>
</head>
<body>
<input type="button" onclick="show_confirm()" value="Show confirm box" />
</body>
</html>

Prompt Box
A prompt box is often used if you want the user to input a value before entering a page. When a prompt box pops up, the user will have to click either "OK" or "Cancel" to proceed after entering an input value. If the user clicks "OK" the box returns the input value. If the user clicks "Cancel" the box returns null.

Syntax
prompt("sometext","defaultvalue");

Example:
<html>
<head>
<title>Prompt box</title>
<script type="text/javascript">
var x=prompt("Enter the number","20");
alert("The Value that u entered is "+x);	
</script>
</head>
<body>
</body>
</html>

Example2:
<html>
<head>
<script type="text/javascript">
function show_prompt()
{
var name=prompt("Please enter your name","Raju");
if (name!=null && name!="")
  {
  document.write("<p>Hello " + name + "! How are you today?</p>");
  }
}
</script>
</head>
<body>
<input type="button" onclick="show_prompt()" value="Show prompt box" />
</body>
</html>

JavaScript Variables/identifiers:
A JavaScript variable is simply a name of storage location. There are some rules while declaring a JavaScript variable.

1 Names can contain letters, digits, underscores, and dollar signs.
2 Names must begin with a letter
3 Names can also begin with $ and _ (but we will not use it in this tutorial)
4. Reserved words (like JavaScript keywords) cannot be used as names
5. You declare JavaScript variables with the var keyword
6. Names are case sensitive (y and Y are different variables)

Correct JavaScript variables
var x = 10;  
var _value="NareshIT";  

Incorrect JavaScript variables
var  1abc=30;  
var *a=320;  

Example:
<!doctype html>
<head>
<script>  
var x = 10;  
var y = 20;  
var z=x+y;  
document.write("The Result is: "+z);  
</script>
</head>  

One Statement, Many Variables
You can declare many variables in one statement. Start the statement with var and separate the variables by comma.

Example:
<!DOCTYPE html>
<body>
<h2>JavaScript Variables</h2>
<script>
var person = "SARA", bname = "Yamaha", price = 2000;
document.write(bname +"<br>")
document.write(price +"<br>")
</script>
</body>

Value = undefined
A variable declared without a value will have the value undefined.

Example:
<!DOCTYPE html>
<body>
<h2>JavaScript Variables</h2>
<script>
var bname;
document.write(bname)
</script>
</body>

Re-Declaring JavaScript Variables
If you re-declare a JavaScript variable, it will not lose its value.

Example:
<!DOCTYPE html>
<body>
<h2>JavaScript Variables</h2>
<p id="txt"></p>
<script>
var bname = "Yamaha";
var bname;
document.getElementById("txt").innerHTML = bname;
</script>
</body>

JavaScript Dollar Sign $
A letter (A-Z or a-z), A dollar sign ($), Or an underscore (_)
Since JavaScript treats a dollar sign as a letter, identifiers containing $ are valid variable names:

Example:
<!DOCTYPE html>
<body>
<h2>JavaScript $</h2>
<script>
var $ = 1;
var $myMoney = 4;
document.write( $ + $myMoney) 
</script>
</body>

JavaScript Underscore (_)
Since JavaScript treats underscore as a letter, identifiers containing _ are valid variable names:

Example:
<!DOCTYPE html>
<body>
<h2>JavaScript _</h2>
<script>
var _x = 2;
var _y = 5;
document.write(_x + _y);
</script>
</body>
<-------------------------------------------------->

<--------------------4th--------------------------->

Using let and const (ES6)
Using the var keyword was the only way to declare a JavaScript variable. JavaScript (ES6) allows the use of the const keyword to define a variable that cannot be reassigned, and the let keyword to define a variable with restricted scope.

JavaScript Block Scope
Variables declared with the var keyword cannot have Block Scope. Variables declared inside a block {} can be accessed from outside the block.

Example
{ 
  var x = 5; 
}
// x CAN be used here

Example:
<!doctype html>
<head>
<script>
{ 
    var x = 5; 
    document.write(x)
  }
  // x CAN be used here
  document.write(x)
</script>
</head>

NOTE:
Before ES2015 JavaScript did not have Block Scope. Variables declared with the let keyword can have Block Scope. Variables declared inside a block {} cannot be accessed from outside the block:

Example
{ 
  let x = 5;
}
// x can NOT be used here

Example:
<head>
<script>
{ 
    let x = 5; 
    document.write(x)
  }
  // x CAN't be used here
  document.write(x) 
</script>
</head>

Redeclaring Variables
Redeclaring a variable using the var keyword can impose problems. Redeclaring a variable inside a block will also redeclare the variable outside the block:

Example:
<!DOCTYPE html>
<body>
<h2>Declaring a Variable Using var</h2>
<script>
var  x = 100;
// Here x is 100
{  
  var x = 20;
  // Here x is 20
}
// Here x is 20
document.write(x);
</script>
</body>

JavaScript const
In JavaScript we can declare constants using 'const' keyword. These are literals, never allow to change.

Assigned when Declared
JavaScript const variables must be assigned a value when they are declared:

InValid Declaration
const PI;
PI = 3.14159265359;

Valid Declaration
Correct
const PI = 3.14159265359;

Example:
<!DOCTYPE html>
<body>
<script>
    // Declaring variables
    let name = "Subba Raju Sir";
    let age = 43;
    let isStudent = true;
    
    // Printing variable values
    document.write(name + "<br>");
    document.write(age + "<br>");
    document.write(isStudent + "<br>");
    
    // Declaring constant
    const PI = 3.14;
    
    // Printing constant value
    document.write(PI); // 3.14
    
    // Trying to reassign
    PI = 10; // error
    </script>
</body>

Block Scope
Declaring a variable with const is similar to let when it comes to Block Scope. The x declared in the block, in this example, is not the same as the x declared outside the block:

Example:
<!DOCTYPE html>
<body>
<h2>Declaring a Variable Using const</h2>
<p id="txt"></p>
<script>
var  x = 100;
// Here x is 100
{  
  const x = 20;
  // Here x is 20
}
// Here x is 100
document.write(x);
</script>
</body>

Javascript Data Types
JavaScript provides different data types to hold different types of values. There are two types of data types in JavaScript.
1. Primitive Data Types
2. Non Primitive(reference) Data Types

JavaScript is a dynamic type language, means you don't need to specify type of the variable because it is dynamically used by JavaScript engine. You need to use var here to specify the data type. It can hold any type of values such as numbers, strings etc.

Example:
var a=40;//holding number  
var b="RajuSir";//holding string  


1. Primitive Data Types
JavaScript has five primitive data types. These are the most simple forms of data we can use in JS programming.

Data Type	Description
String		Represents sequence of characters e.g. "JS"
Number		Represents numeric values e.g. 100
Boolean		Represents boolean value either false or true
Undefined	Represents undefined value
Null		Represents null i.e. no value at all

JavaScript Strings
A string is a variable which stores a series of characters like "nit". A string can be any text inside quotes. You can use single or double quotes:

Example
var name="nit";
var name='nit';

Example:
<!doctype html>
<head>
<script type="text/javascript">
document.write("Hello Welcome to JS Strings")
document.write("<br/>")
document.write('Hello Welcome to JS Strings')
</script>
</head>

Example:
<!doctype html>
<head>
<script type="text/javascript">
Str1="Hello",var Str2='World'
document.write("First String is: "+Str1)
document.write("<br/>")
document.write("Second String is: "+Str2)
</script>
</head>

Number Data Type
JavaScript has only one type of numbers. Numbers can be written with, or without decimals:

Example
var x1=34.00;      // Written with decimals
var x2=34;         // Written without decimals

Example:
<!doctype html>
<head>
<script type="text/javascript">
var x=10;var y=20.99; var z=x+y;
var name="Naresh i Technologies";
document.write("The value of x is "+x);
document.write("<br>");
document.write("The value of y is "+y);
document.write("<br>");
document.write("The value of z is "+z);
document.write("<br>");
document.write(name+" is Leader in IT Training");	
</script>
</head>

Boolean Data Type
The Boolean data type
The Boolean data type is used to represent a Boolean value. A Boolean value can be used to represent data that is in either of two states.Booleans are often used in conditional testing.

The two Boolean values
true // equivalent to true, yes, or on
false // equivalent to false, no, or off

Example:
<!doctype html>
<head>
<script type="text/javascript">
var x=10;var y=20;
document.write("The value is: "+(x>y));
document.write("<br>");
document.write("The value is: "+(x<y));
</script>
</head>

Undefined 
It is the value of a variable with no value. 

Example
var x;               // Now x is undefined

Example:
<!doctype html>
<head>
<script type="text/javascript">
var x;
document.write("The value is: "+x +"<br/>");
var y;
document.write("The value is: "+y);
</script>
</head>

null:
Variables can be emptied by setting the value to null;

Example:
var x=null;       // Now x is null

Example:
<!doctype html>
<head>
<script type="text/javascript">
var x=null;
document.write("The value is: "+x +"<br/>");
var y=null;
document.write("The value is: "+y);
</script>
</head>

2. Non Primitive Data Types
Object:
Declaring Variables as Objects.When a variable is declared with the keyword "new", the variable is declared as an object:

Syntax:
name = new String();//String Object
x =new Number();//Number Object
y =new Boolean();//Boolean Object

Dynamic Types:
JavaScript has dynamic types. This means that the same variable can be used as different types:

Example
var x;               // Now x is undefined
var x = 5;           // Now x is a Number
var x = "RaaJ";      // Now x is a String

Example:
<!doctype html>
<body>
<script>
var x;
document.write(x +"<br/>");
var x=96; 
document.write(x);
document.write("<br/>");
var x="Modern Java Script";
document.write(x +"<br/>");
var x=null;
document.write(x +"<br/>");
var x=true;
document.write(x +"<br/>");
</script>
</body>

HTML <noscript> Tag
It is used to provide an alternate content for users that have disabled scripts in their browser or have a browser that doesn’t support client-side scripting. It is a paired tag.

Syntax: 
<noscript>..............</noscript>

Example:
<!doctype html>
<head>
<script>
document.write("Welcome to JavaScripting")
document.write("<br/>")
document.write("Welcome to JavaScripting")
</script>
</head>
<body>
<noscript>
<p>OOPs Script unable to execute on this web browser...!!</p>
</noscript>
</body>

JavaScript Operators
JavaScript operators are symbols that are used to perform operations on operands.There are following types of operators in JavaScript.

1 Arithmetic Operators
2 Assignment Operators
3 JavaScript String Operators
4 JavaScript Incrementing and Decrementing Operators
5 JavaScript Logical Operators
6 JavaScript Comparison Operators

JavaScript Arithmetic Operators
Arithmetic operators are used to perform arithmetic operations on the operands.

Operator		Description		Example
+		Addition			10+20 = 30
-		Subtraction		20-10 = 10
*		Multiplication		10*20 = 200
/		Division			20/10 = 2
%		Modulus (Remainder)	20%10 = 0
++		Increment		var a=10; a++; Now a = 11
--		Decrement		var a=10; a--; Now a = 9


Example:
<!DOCTYPE html>
<body>
    <script>
    var x = 10;
    var y = 4;
    document.write(x + y); // Prints: 14
    document.write("<br>");
    
    document.write(x - y); // Prints: 6
    document.write("<br>");
    
    document.write(x * y); // Prints: 40
    document.write("<br>");
    
    document.write(x / y); // Prints: 2.5
    document.write("<br>");
    
    document.write(x % y); // Prints: 2
    </script>
</body>

JavaScript Assignment Operators
The assignment operators are used to assign values to variables.
Operator 	Description 		Example 	Is The Same As
= 	Assign 			x = y 	x = y
+= 	Add and assign 		x += y 	x = x + y
-= 	Subtract and assign 		x -= y 	x = x - y
*= 	Multiply and assign 		x *= y 	x = x * y
/= 	Divide and assign quotient 	x /= y 	x = x / y
%= 	Divide and assign modulus 	x %= y 	x = x % y

Example:
<!DOCTYPE html>
<body>
    <script>
    var x;    // Declaring Variable
    x = 10;
    document.write(x + "<br>"); // Prints: 10
    
    x = 20;
    x += 30;
    document.write(x + "<br>"); // Prints: 50
     
    x = 50;
    x -= 20;
    document.write(x + "<br>"); // Prints: 30
     
    x = 5;
    x *= 25;
    document.write(x + "<br>"); // Prints: 125
     
    x = 50;
    x /= 10;
    document.write(x + "<br>"); // Prints: 5
     
    x = 100;
    x %= 15;
    document.write(x); // Prints: 10
    </script>
</body>

JavaScript String Operators
There are two operators which can also used be for strings.

Operator 	Description 		Example 		Result
+ 	Concatenation 		str1 + str2 	Concatenation of str1 and str2
+= 	Concatenation assignment 	str1 += str2 	Appends the str2 to the str1

Example:
<!DOCTYPE html>
<body>
    <script>
    var str1 = "Hello";
    var str2 = " World!";
    document.write(str1 + str2 + "<br>"); // Outputs: Hello World!
    str1 += str2;
    document.write(str1); // Outputs: Hello World!
    </script>
</body>

JavaScript Incrementing and Decrementing Operators
The increment/decrement operators are used to increment/decrement a variable's value.
Operator 	Name 		Effect
++x 	Pre-increment 	Increments x by one, then returns x
x++ 	Post-increment 	Returns x, then increments x by one
--x 	Pre-decrement 	Decrements x by one, then returns x
x-- 	Post-decrement 	Returns x, then decrements x by one

Example:
<!DOCTYPE html>
<body>
    <script>
    var x; // Declaring Variable
    x = 10;
    document.write(++x); // Prints: 11
    document.write("<p>" + x + "</p>");   // Prints: 11
     
    x = 10;
    document.write(x++); // Prints: 10
    document.write("<p>" + x + "</p>");   // Prints: 11
     
    x = 10;
    document.write(--x); // Prints: 9
    document.write("<p>" + x + "</p>");   // Prints: 9
     
    x = 10;
    document.write(x--); // Prints: 10
    document.write("<p>" + x + "</p>");   // Prints: 9
    </script>
</body>

JavaScript Logical Operators
The logical operators are typically used to combine conditional statements.

Operator 	Name 	Example 	Result
&& 	And 	x && y 	True if both x and y are true
|| 	Or 	x || y 	True if either x or y is true
! 	Not 	!x 	True if x is not true

Example:
<!doctype html>
   <body>   
      <script type = "text/javascript">
            var a = true;
            var b = false;
            var linebreak = "<br />";
      
            document.write("(a && b) => ");
            result = (a && b);
            document.write(result);
f            document.write(linebreak);
         
            document.write("(a || b) => ");
            result = (a || b);
            document.write(result);
            document.write(linebreak);
         
            document.write("!(a && b) => ");
            result = (!(a && b));
            document.write(result);
            document.write(linebreak);
      </script>      
   </body>

JavaScript Comparison Operators
The comparison operators are used to compare two values in a Boolean fashion.

Operator 		Name 			Example 		
== 		Equal 			x == y 		
=== 		Identical 			x === y 		
!= 		Not equal 		x != y 	
!== 		Not identical 		x !== y 	
< 		Less than 		x < y 	
> 		Greater than 		x > y 	
>= 		Greater than or equal to 	x >= y 	
<= 		Less than or equal to 	x <= y 	

Example:
<!DOCTYPE html>
<body>
    <script>
    var x = 25;
    var y = 35;
    var z = "25";
    document.write(x == z);  // Prints: true, Checks only values
    document.write("<br>");
    
    document.write(x === z); // Prints: false,Checks including data types
    document.write("<br>");
    
    document.write(x != y);  // Prints: true
    document.write("<br>");
    
    document.write(x !== z); // Prints: true
    document.write("<br>");
    
    document.write(x < y);   // Prints: true
    document.write("<br>");
    
    document.write(x > y);   // Prints: false
    document.write("<br>");
    
    document.write(x <= y);  // Prints: true
    document.write("<br>");
    
    document.write(x >= y);  // Prints: false
    </script>
</body>
<------------------------------------------------>
<---------------------5th------------------------>

JavaScript Operators
JavaScript operators are symbols that are used to perform operations on operands.There are following types of operators in JavaScript.

1 Arithmetic Operators
2 Assignment Operators
3 JavaScript String Operators
4 JavaScript Incrementing and Decrementing Operators
5 JavaScript Logical Operators
6 JavaScript Comparison Operators

JavaScript Arithmetic Operators
Arithmetic operators are used to perform arithmetic operations on the operands.

Operator		Description		Example
+		Addition			10+20 = 30
-		Subtraction		20-10 = 10
*		Multiplication		10*20 = 200
/		Division			20/10 = 2
%		Modulus (Remainder)	20%10 = 0
++		Increment		var a=10; a++; Now a = 11
--		Decrement		var a=10; a--; Now a = 9


Example:
<!DOCTYPE html>
<body>
    <script>
    var x = 10;
    var y = 4;
    document.write(x + y); // Prints: 14
    document.write("<br>");
    
    document.write(x - y); // Prints: 6
    document.write("<br>");
    
    document.write(x * y); // Prints: 40
    document.write("<br>");
    
    document.write(x / y); // Prints: 2.5
    document.write("<br>");
    
    document.write(x % y); // Prints: 2
    </script>
</body>

JavaScript Assignment Operators
The assignment operators are used to assign values to variables.
Operator 	Description 		Example 	Is The Same As
= 	Assign 			x = y 	x = y
+= 	Add and assign 		x += y 	x = x + y
-= 	Subtract and assign 		x -= y 	x = x - y
*= 	Multiply and assign 		x *= y 	x = x * y
/= 	Divide and assign quotient 	x /= y 	x = x / y
%= 	Divide and assign modulus 	x %= y 	x = x % y

Example:
<!DOCTYPE html>
<body>
    <script>
    var x;    // Declaring Variable
    x = 10;
    document.write(x + "<br>"); // Prints: 10
    
    x = 20;
    x += 30;
    document.write(x + "<br>"); // Prints: 50
     
    x = 50;
    x -= 20;
    document.write(x + "<br>"); // Prints: 30
     
    x = 5;
    x *= 25;
    document.write(x + "<br>"); // Prints: 125
     
    x = 50;
    x /= 10;
    document.write(x + "<br>"); // Prints: 5
     
    x = 100;
    x %= 15;
    document.write(x); // Prints: 10
    </script>
</body>

JavaScript String Operators
There are two operators which can also used be for strings.

Operator 	Description 		Example 		Result
+ 	Concatenation 		str1 + str2 	Concatenation of str1 and str2
+= 	Concatenation assignment 	str1 += str2 	Appends the str2 to the str1

Example:
<!DOCTYPE html>
<body>
    <script>
    var str1 = "Hello";
    var str2 = " World!";
    document.write(str1 + str2 + "<br>"); // Outputs: Hello World!
    str1 += str2;
    document.write(str1); // Outputs: Hello World!
    </script>
</body>

JavaScript Incrementing and Decrementing Operators
The increment/decrement operators are used to increment/decrement a variable's value.
Operator 	Name 		Effect
++x 	Pre-increment 	Increments x by one, then returns x
x++ 	Post-increment 	Returns x, then increments x by one
--x 	Pre-decrement 	Decrements x by one, then returns x
x-- 	Post-decrement 	Returns x, then decrements x by one

Example:
<!DOCTYPE html>
<body>
    <script>
    var x; // Declaring Variable
    x = 10;
    document.write(++x); // Prints: 11
    document.write("<p>" + x + "</p>");   // Prints: 11
     
    x = 10;
    document.write(x++); // Prints: 10
    document.write("<p>" + x + "</p>");   // Prints: 11
     
    x = 10;
    document.write(--x); // Prints: 9
    document.write("<p>" + x + "</p>");   // Prints: 9
     
    x = 10;
    document.write(x--); // Prints: 10
    document.write("<p>" + x + "</p>");   // Prints: 9
    </script>
</body>

JavaScript Logical Operators
The logical operators are typically used to combine conditional statements.

Operator 	Name 	Example 	Result
&& 	And 	x && y 	True if both x and y are true
|| 	Or 	x || y 	True if either x or y is true
! 	Not 	!x 	True if x is not true

Example:
<!doctype html>
   <body>   
      <script type = "text/javascript">
            var a = true;
            var b = false;
            var linebreak = "<br />";
      
            document.write("(a && b) => ");
            result = (a && b);
            document.write(result);
            document.write(linebreak);
         
            document.write("(a || b) => ");
            result = (a || b);
            document.write(result);
            document.write(linebreak);
         
            document.write("!(a && b) => ");
            result = (!(a && b));
            document.write(result);
            document.write(linebreak);
      </script>      
   </body>

JavaScript Comparison Operators
The comparison operators are used to compare two values in a Boolean fashion.

Operator 		Name 			Example 		
== 		Equal 			x == y 		
=== 		Identical 			x === y 		
!= 		Not equal 		x != y 	
!== 		Not identical 		x !== y 	
< 		Less than 		x < y 	
> 		Greater than 		x > y 	
>= 		Greater than or equal to 	x >= y 	
<= 		Less than or equal to 	x <= y 	

Example:
<!DOCTYPE html>
<body>
    <script>
    var x = 25;
    var y = 35;
    var z = "25";
    document.write(x == z);  // Prints: true, Checks only values
    document.write("<br>");
    
    document.write(x === z); // Prints: false,Checks including data types
    document.write("<br>");
    
    document.write(x != y);  // Prints: true
    document.write("<br>");
    
    document.write(x !== z); // Prints: true
    document.write("<br>");
    
    document.write(x < y);   // Prints: true
    document.write("<br>");
    
    document.write(x > y);   // Prints: false
    document.write("<br>");
    
    document.write(x <= y);  // Prints: true
    document.write("<br>");
    
    document.write(x >= y);  // Prints: false
    </script>
</body>
<----------------------------------------------->

<-----------------6th--------------------------->
JavaScript Conditional Statements
JavaScript also allows you to write code that perform different actions based on the results of a logical or comparative test conditions at run time. There are several conditional statements in JavaScript that you can use to make decisions.

1 The if statement
2 The if...else statement
3 The if...else if....else statement
4 The switch...case statement
5 The Ternary Operator

The if Statement
The if statement is used to execute a block of code only if the specified condition evaluates to true. 

Syntax
if(condition) {
    // Code to be executed
} 

Example:
<!doctype html>
<body>
<script>  
var a=prompt("Enter Any Number: ");  
if(a>10)
{  
document.write("Value of a is greater than 10");  
}  
</script>  
</body>

Example:
<!doctype html>
<head>
<script type="text/javascript">
var x = prompt("Enter number 10");
if(x==10)
{
 alert("Its Correct");
}
</script>
</head>

2. if...else statement: 
It evaluates the content whether condition is true or false.

Syntax
if (condition)
  {
  True Block Statements
  True Block Statements
  }
else
  {
   False Block Statements
   False Block Statements
   }

Example:
<!doctype html>
<body>
<script>  
var a=prompt("Enter Any Number: ")  
if(a%2==0)
{  
document.write("a is Even Number");  
}  
else
{  
document.write("a is Odd Number");  
}  
</script>
</body>

Example:
<!doctype html>
<head>
<script type="text/javascript">
var b = prompt("Enter any number");
if (b > 100)
{
document.write("b is greater than 100")
}
else
{
document.write("b is less than or equal to 100")
}
</script>
</head>

If...else if...else Statement:
It is used to select one of several blocks of code to be executed.

Syntax
if(condition1) {
    // Code to be executed if condition1 is true
} else if(condition2) {
    // Code to be executed if the condition1 is false and condition2 is true
} else {
    // Code to be executed if both condition1 and condition2 are false
} 

Example:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cascading Style Sheets...!!</title>
</head>
<body>
<script>
    var x=prompt("Enter Any Number: ")
    parseInt(x)
    if(x>0)
    {
        document.write("YES POSITIVE")
        document.write("<br>")
        document.write("It is if block")
    }
    else if(x<0)
    {
        document.write("YES NEGATIVE:")
        document.write("<br>")
        document.write("It is elseif block")
    }
    else if(x==0)
    {
        document.write("ZEROZERO")
        document.write("<br>")
        document.write("It is elseif block")
    }
    else
    {
        document.write("Sorry Invalid Input")
        document.write("<br>")
        document.write("It is else block")
    }
</script>    
</body>
</html>

Example:
<!doctype html>
<body>
<script>  
var a=20;  
if(a==10)
{  
document.write("a is equal to 10");  
}  
else if(a==15)
{  
document.write("a is equal to 15");  
}  
else if(a==20)
{  
document.write("a is equal to 20");  
}  
else
{  
document.write("a is not equal to 10, 15 or 20");  
}  
</script>  
</body>

Example:
JavaScript Switch Statement
Use the switch statement to select one of many blocks of code to be executed. 

Syntax
switch(n)
{
case 1:
  execute code block 1
  break;
case 2:
  execute code block 2
  break;
default:
  code to be executed if 
n is different from case 1 and 2
}

The default Keyword
Use the default keyword to specify what to do if there is no match:

Example:
<!doctype html>
<head>
<script>
var grade=prompt("Enter any Upper Case Alphabet: ","A");
document.write("Entering switch block<br />");
switch (grade)
{
  case 'A': document.write("Good job<br />");
            break;
  case 'B': document.write("Pretty good<br />");
            break;
  case 'C': document.write("Passed<br />");
            break;
  case 'D': document.write("Not so good<br />");
            break;
  case 'F': document.write("Failed<br />");
            break;
  default:  document.write("Unknown grade<br />")
}
document.write("Exiting switch block");
</script>
</head>

Example:
<!doctype html>
<head>
<script type="text/javascript">
var MyNum=prompt("Enter any Number","5");
switch (MyNum)
{
  case '1': document.write("Selected First Block<br />");
            break;
  case '2': document.write("Selected Second Block<br />");
            break;
  case '3': document.write("Selected third Block<br />");
            break;
  case '4': document.write("Selected Fourth Block<br />");
            break;
  case '5': document.write("Selected Fifth Block<br />");
            break;
  default:  document.write("Default Block<br />")
}
</script>
</head>

Example:
<!doctype html>
<head>
<script type="text/javascript">
var book=prompt
("Enter your favorite book(HTML, JS, CSS, jQuery): ","JS")
switch(book)
{
case 'HTML':
alert("You are Selected HTML");
break;
case 'JS':
alert("You are Selected JS");
break;
case 'CSS':
alert("You are Selected CSS");
break;
case 'jQuery':
alert("You are Selected jQuery");
break;
default:
alert("You are Selected Wrong Book");
}
</script>
</head>

Example:
<!DOCTYPE html>
<body>
<script>  
var grade=prompt("Enter Any Grade: ");  
var result;  
switch(grade)
{  
case 'A':  
result="A Grade";  
break;  
case 'B':  
result="B Grade";  
break;  
case 'C':  
result="C Grade";  
break;  
default:  
result="No Grade";  
}  
document.write(result);  
</script>  
</body>

Example:
<!doctype html>
<script>
var page=prompt("Enter any desired Page Name(Home,About,News,Login,Links): ","Home")
document.write("Entering switch block<br />")
switch (page)
{
case "Home": document.write("You selected Home Page")
break
case "About": document.write("You selected About Page")
break
case "News": document.write("You selected News Page")
break
case "Login": document.write("You selected Login Page")
break
case "Links": document.write("You selected Links Page")
break
default:  document.write("You selected Unknown page<br />")
}
</script>

The Ternary Operator
The ternary operator provides a shorthand way of writing the if...else statements. The ternary operator is represented by the question mark (?) symbol and it takes three operands: a condition to check, a result for true, and a result for false.

Syntax:
var result = (condition) ? value1 : value2

NOTE:
The ternary operator evaluates the test condition.
    If the condition is true, expression1 is executed.
    If the condition is false, expression2 is executed.
The ternary operator takes three operands, hence, the name ternary operator. It is also known as a conditional operator.

Example:
<!DOCTYPE html>
<body>
    <script>
    var age = prompt("Enter Age: ")
    var userType = age < 18 ? 'Child' : 'Adult';
    document.write(userType); 
    var age = prompt("Enter Age: ")
    var userType = age < 18 ? 'Child' : 'Adult';
   document.write("<br/>");
    document.write(userType);
    </script>
</body>

JavaScript Reserved Words:
Reserved words or keywords, they cannot be used as JavaScript variables, functions, methods, loop labels, or any object names.

abstract 		arguments 	await* 		boolean
break 		byte 		case 		catch
char 		class* 		const 		continue
debugger 		default 		delete 		do
double 		else 		enum* 		eval
export* 		extends* 		false 		final
finally 		float 		for 		function
goto 		if 		implements 	import*
in 		instanceof 	int 		interface
let* 		long 		native 		new
null 		package 		private 		protected
public 		return 		short 		static
super* 		switch 		synchronized 	this
throw 		throws 		transient 		true
try 		typeof 		var 		void
volatile 		while 		with 		yield

NOTE:
Words marked with* are new in ECMAScript 5 and 6. 

Removed Reserved Words
The following reserved words have been removed from the ECMAScript 5/6 standard:
abstract 		boolean 		byte 		char
double 		final 		float 		goto
int 		long 		native 		short
synchronized 	throws 		transient 		volatile
<----------------------------------------------->

<-----------------------7th---------------------->
JavaScript Looping Statements:
Different Kinds of Loops
JavaScript supports different kinds of loops:
1 for - loops through a block of code a number of times
2 while - loops through a block of code while a specified condition is true
3 do/while - also loops through a block of code while a specified condition is true
4 for/in - loops through the properties of an object

for Loop
A for loop enables a particular set of conditions to be executed repeatedly until a condition is satisfied.

Syntax:
for (initialization; test condition; iteration statement)
{
     Statement(s) to be executed if test condition is true
     Statement(s) to be executed if test condition is true
}
 
Example:
<!doctype html>
<body>
<script type="text/javascript">
for (i=1;i<=5;i++)
{
document.write("The number is " + i);
document.write("<br />");
}
</script>
</body>

Example:
<!doctype html>
<body>
<script type="text/javascript">
for (i = 1; i <= 6; i++)
{
document.write("<h" + i + ">This is heading ");
document.write("</h" + i + ">");
}
</script>
</body>

JavaScript While Loop 
There are two key parts to a JavaScript while loop:
1.The conditional statement which must be True for the while loop's code to be executed.
2.The while loop's code that is contained in curly braces "{ and }" will be executed if the condition is True.

Syntax
while (variable<=endvalue)
  {
  code to be executed
  code to be executed
  }

Example1
<!doctype html>
<body>
<script type="text/javascript">
var i=1;
while (i<=10)
{
document.write("The number is " + i);
document.write("<br />");
i++;
}
</script>
</body>

Example:
<!doctype html>
<head>
<script>
counter=0
while (counter < 5)
{
document.write("Counter: " + counter + "<br />")
++counter
}
</script>
</head>

do...while Loops
When you require a loop to iterate at least once before any tests are made, use a
do...while loop, which is similar to a while loop, except that the test expression is
checked only after each iteration of the loop.

Syntax
do
  {
  code to be executed
  code to be executed
  }
while (variable<=endvalue);

Example:
<!doctype html>
<head>
<script type="text/javascript">
var i = 1;
do
{
document.write("The number is " + i);
document.write("<br />");
i++;
}
while (i <= 10);
</script>
</head>

Example:
<!doctype html>
<head>
<script>
count = 1
do
{
document.write(count + " times 7 is " + count * 7 + "<br />")
} 
while (++count <= 7)
</script>
</head>

JavaScript Break and Continue Statements
The break Statement
The break statement will break the loop and continue executing the code that follows after the loop (if any).

Example:
<!doctype html>
<body>
<script type="text/javascript">
var i=0;
for (i=0;i<=10;i++)
  {
  if (i==3)
    {
    break;
    }
  document.write("The number is " + i);
  document.write("<br />");
  }
</script>
</body>

The continue Statement
The continue statement will break the current loop and continue with the next value.

Example:
<!doctype html>
<body>
<script type="text/javascript">
var i=0;
for (i=0;i<=10;i++)
  {
  if (i==3)
    {
continue;
    }
  document.write("The number is " + i);
  document.write("<br />");
  }
</script>
</body>

JavaScript for...in loop:
There is one more loop supported by JavaScript. It is called for...in loop. This loop is used to loop through an object's properties.

Syntax:
for (variablename in object)
{
  statement or block to execute
  statement or block to execute
}

Example: For In
<!doctype html>
<body>
<script type="text/javascript">
var pros;
document.write("Navigator Object Properties<br /> ");
for (pros in navigator) 
{
document.write(pros +"<br/>");
}
</script>
</body>

innerHTML:
This property sets or returns the HTML content (inner HTML) of an element.

Syntax:
HTMLElementObject.innerHTML = text (Specifies the HTML content of an element)

getElementById() Method:
It returns the element that has the ID attribute with the specified value.

Syntax
document.getElementById(elementID)

Example:
<!DOCTYPE html>
<body>
<p id="text">Click the button to change the text in this paragraph.</p>
<button onclick="myFunction()">ClickHere</button>
<script>
function myFunction() 
{
  document.getElementById("text").innerHTML = "Hello JavaScript";
}
</script>
</body>

Example:For In
<!DOCTYPE html>
<body>
<h2>JavaScript For In</h2>
<p id="arr"></p>
<script>
var txt = "";
var numbers = [5, 5, 6, 7, 8, 9,10];
var x;
for (x in numbers) {
  txt += numbers[x] + "<br>"; 
}
document.getElementById("arr").innerHTML = txt;
</script>
</body>
<--------------------------------------------------->

<-----------------------------8th------------------->
Define Function?
A function is a block of code that will be executed only by an occurence of an event at that time fuction is called. A function can called from anywhere within the HTML page.  Function can define in the beginning of the <head> Tag.

A function is a group of reusable code which can be called anywhere in your program. This eliminates the need of writing same code again and again. This will help programmers to write modular code. This benefit is also known as "code reusability". 

Syntax
function functionName(parameters) 
{
code to be executed
code to be executed
}

Example:
<!DOCTYPE html>
<html>
    <title>Java-Script Functions...!!</title>
    <script type="text/javascript">
    //function body Part
    //Logical Implementation Part
    //This is Called Part
    //Declaring Arguments
    //Function is return type
    function WishMe()
    {
      window.alert("Welcome to Functions...!!")
      alert("FunctionsAreCodeReusability...!!")
    }
    </script>
</head>
<body>
  <!--Function Calling Part -->
  <!--Passing Parameters -->
  <!--Tail Part of the function -->
<p>Click the Following button to call the function....!!</p>
<button onclick="WishMe()">ClickHere.!</button>
</body>

Example:
<!doctype html>
<head>
<script type="text/javascript">
function popup() 
{
alert("Hello World")
}
</script>
</head>
<body>
<input type="button" onclick="popup()" value="popup">
</body>

Calling a Function with Arguments
When you call a function, you can pass along some values to it, these values are called arguments or parameters. These arguments can be used inside the function. You can send as many arguments as you like, separated by commas (,)

Syntax:
function myFunction(var1,var2)
{
JS Statements
JS Statements
JS Statements
}

The return Statement
The return statement is used to specify the value that is returned from the function. So, functions that are going to return a value must use the return statement. A JavaScript function can have an optional return statement.

Example:
<!doctype html>
<head>
<script type="text/javascript">
function myFunction()
{
return ("Hello world!");
}
</script>
</head>
<body>
<script type="text/javascript">
document.write(myFunction())
</script>
</body>

Example:
<!doctype html>
<head>
<script type="text/javascript">
function addition(x,y)
{
return x+y;
}
</script>
<script>
document.write("Addtion of two Number: "+addition(4,5));
</script>

Example:
<!doctype html>
<head>
<p>Click the button to call a function with arguments</p>
<script type="text/javascript">
function myFunction(name,job)
{
alert("Welcome " + name + ", the " + job);
}
</script>
<head>
<body>
<button onclick="myFunction('Subbaraju','SoftwareEngineer')">ClickMe</button>
</body>

Example:
<!doctype html>
<head>
<p>Click one of the buttons to call a function with arguments</p>
<script type="text/javascript">
function myFunction(name,job)
{
alert("Welcome " + name + ", the " + job);
}
</script>
</head>
<body>
<button onclick="myFunction('Smith','SQL Developer')">Click forSmith</button>
<button onclick="myFunction('Scott','Programmer')">Click for Scott</button>
</body>

The Lifetime of JavaScript Variables
Local JavaScript Variables
A variable declared within a JavaScript function becomes LOCAL and can only be accessed within that function. (the variable has local scope). You can have local variables with the same name in different functions.

Example:
<!doctype html>
<script>
function Scope_Local()
{
var x;
x = 5;
-------------
-------------
}

Example:
<!DOCTYPE html>
<html>
    <title>Java-Script Functions...!!</title>
    <script type="text/javascript">
    function Display1()
    {
      //Local Scope Variables
      //These are within the function
      var a=10,b=20
      document.write("The Result is: "+(a+b))
    }
    </script>
</head>
<body>
<button onclick="Display1()">HiTMe</button>
</body>
</html>

Global JavaScript Variables
Variables declared outside a function become GLOBAL, all scripts and functions on the web page can access it. Global variables are deleted when you close the page.

Example:
<!DOCTYPE html>
    <script type="text/javascript">
    //Global Scope
    b=1
    function Display1()
    {
      //Local Scope Variables
      //These are within the function
      var a=10,b=20
      document.write("The Result is: "+(a+b))
    }
    function Display2()
    {
      //Local Scope Variables
      //These are within the function
      var a=10
      document.write("The Result is: "+(a+b))
    }
    </script>
</head>
<body>
  <button onclick="Display1()">HiTMe</button>
  <button onclick="Display2()">HiTMe</button>
</body>

Example:
<!doctype html>
<script>
//Global Scope
year = 1997; 
function local_globalvariable () 
{ 
//LocalScope
month = 2; 
} 
local_globalvariable (); 
document . write ("year=" + year + " and month="+ month);
</script>	

Example:
<!doctype html>
<body>
<script>
//Global Scope
year = 2012; 
function local_globalvariable() 
{ 
//Local Scope
month = 8; 
}
function local_global_variable() 
{ 
//Local Scope
month = 9; 
}
local_globalvariable(); 
document . write ("year=" + Year + " and month="+ month);
document.write("<br/>");
local_global_variable(); 
document . write ("year=" + Year + " and month="+ month);
</script>	
</body>

BackGround Colors:
//document is an object represents webpage
// bgcolor is the Property of doc object
Example:
<!DOCTYPE html>
<html>
    <title>Java-Script Functions...!!</title>
    <script type="text/javascript">
    function BgColorRed()
    {
      document.bgColor='red'
    }
    function BgColorBlue()
    {
      document.bgColor='blue'
    }
    function BgColorWhite()
    {
      document.bgColor='white'
    }
    </script>
</head>
<body>
<p>Click the following button to display Background Color..!!</p>  
<input type="submit" onclick="BgColorRed()" value="RedBg"/>
<input type="submit" onclick="BgColorBlue()" value="BlueBg"/>
<input type="submit" onclick="BgColorWhite()" value="WhiteBg"/>
</body>
<----------------------------------------------------------------->

<----------------------------------9th----------------------------->

Self-Invoking Functions
Function expressions can be made "self-invoking". A self-invoking expression is invoked (started) automatically, without being called. Function expressions will execute automatically if the expression is followed by (). You cannot self-invoke a function declaration. You have to add parentheses around the function to indicate that it is a function expression.

Example:
<!doctype html>
<body>
<p>Functions can be invoked automatically without being called:</p>
<p id="demo"></p>
<script>
(function () {
document.getElementById("demo").innerHTML = "Hello! I Called MySelf";
})();
</script>
</body>

Arrow Functions:
These allows a short syntax for writing function expressions. You don't need the function keyword, the return keyword, and the curly brackets.

Example:
<!DOCTYPE html>
<body>
<p id="txt"></p>
<script>
const x = (x, y) => x * y;
document.getElementById("txt").innerHTML = x(6, 5);
</script>
</body>

NOTE:
1 Arrow functions do not have their own this.
2 Arrow functions are not hoisted. 
3 Using const is safer than using var, a function expression is always constant value.


WORKING WITH JAVASCRIPT Events
By using JavaScript, we have the ability to create dynamic web pages. Events are actions that can be detected by JavaScript.  Every element on a web page has certain events which can trigger a JavaScript. Events are normally used in combination with functions.

EXAMPLES:
Clicking a button
A page is finished loading
An image is finished loading
Moving the mouse-cursor over an element
Entering an input field
Submitting a Form
A key Stroke .......!!

Events in JavaScript.
Event 		Description  
click 		Occurs when the user clicks on a link or form element
error		Occurs when an error happens during loading of doc 	
focus 		Occr when input focus is given to a form element.  
load 		Occurs when a page is loaded into Navigator 
mouseout  	Occurs when the user moves the pointer off 
mouseover  	Occurs when the user moves the pointer over
reset 		when the user clears a form using the Reset button  
select  		Occurs when the user selects a form element's field  
submit  		Occurs when a form is submitted
unload  		Occurs when the user leaves a page 

onClick: The onclick event occurs when the user clicks on an element.

Syntax
In HTML:
<element onclick="SomeJavaScriptCode">

In JavaScript:
object.onclick="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script>
function displayDate()
{
document.getElementById("demo").innerHTML=Date();
}
</script>
</head>
<body>
<p>Click the button to execute the <h3>displayDate()</h3></p>
<button id="myBtn" onclick="displayDate()">ClickMe</button>
<p id="demo"></p>
</body>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
function MyMsg()
{
alert("Welcome to JSEvents");
}
</script>
</head>
<body>
<p>Click the button to display the alert Msg ..</p>
<button  onclick="MyMsg()"><img src='html5.png' width=10px height=10px> </button>
<input type='submit' value="ClickMe" onclick="MyMsg()">
<input type='button' value="ClickMe" onclick="MyMsg()" >
</body>

ondblclick Event:
The ondblclick event occurs when the user double-clicks on an element.

Syntax:
In Html
<element ondblclick="SomeJavaScriptCode">

Syntax:
In JavaScript:
object.ondblclick="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script type='text/javascript'>
function MyColor()
{
document.getElementById("col").style.color="#FF0099";
}
</script>
</head>
<body>
<p id="col">Double Click the button to Chage the Color of the Text...!</p>
<button ondblclick="MyColor()">DClickMe</button>
</body>

Example:
<!doctype html>
<head>
<script>
function copyText()
{
document.getElementById("field2").value=document.getElementById("field1").value;
}
</script>
</head>
<body>
Field1: <input type="text" id="field1" value="Hello World!" /><br />
Field2: <input type="text" id="field2" />
<br /><br />
<button ondblclick="copyText()">Copy Text</button>
</body>
		
onload:
The onload event occurs when an object has been loaded. onload is most often used within the <body> element to execute a script once a web page has completely loaded all content (including images, script files, CSS files, etc.).

Syntax
In HTML:
<element onload="SomeJavaScriptCode">

In JavaScript:
object.onload="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script>
function load()
{
alert("Page is loaded");
}
</script>
</head>
<body onload="load()">
<h1>Hello World!</h1>
</body>

Example:
<!doctype html>
<head>
<script>
function loadImage()
{
alert("Image is loaded Successfully");
}
</script>
</head>
<body>
<img src="html5.png" onload="loadImage()" width="100" height="132" />
</body>

onunload Event:
The onunload event occurs once a page has unloaded (or the browser window has been closed). onunload occurs when the user navigates away from the page (by clicking on a link, submitting a form, closing the browser window, etc.)

Syntax
In HTML:
<element onunload="SomeJavaScriptCode">

In JavaScript:
object.onunload="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script>
function bye()
{
alert("Thank you for visiting MySite!!");
}
</script>
</head>
<body onunload="bye()">
<h1>Welcome to my World</h1>
<p>Close this window or press F5 to reload the page.</p>
</body>
<----------------------------------------------------------------->

<---------------------------------10th---------------------------->

WORKING WITH JAVASCRIPT Events
By using JavaScript, we have the ability to create dynamic web pages. Events are actions that can be detected by JavaScript.  Every element on a web page has certain events which can trigger a JavaScript. Events are normally used in combination with functions.

EXAMPLES:
Clicking a button
A page is finished loading
An image is finished loading
Moving the mouse-cursor over an element
Entering an input field
Submitting a Form
A key Stroke .......!!

Events in JavaScript.
Event 		Description  
click 		Occurs when the user clicks on a link or form element
error		Occurs when an error happens during loading of doc 	
focus 		Occr when input focus is given to a form element.  
load 		Occurs when a page is loaded into Navigator 
mouseout  	Occurs when the user moves the pointer off 
mouseover  	Occurs when the user moves the pointer over
reset 		when the user clears a form using the Reset button  
select  		Occurs when the user selects a form element's field  
submit  		Occurs when a form is submitted
unload  		Occurs when the user leaves a page 

onClick: The onclick event occurs when the user clicks on an element.

Syntax
In HTML:
<element onclick="SomeJavaScriptCode">

In JavaScript:
object.onclick="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script>
function displayDate()
{
document.getElementById("demo").innerHTML=Date();
}
</script>
</head>
<body>
<p>Click the button to execute the <h3>displayDate()</h3></p>
<button id="myBtn" onclick="displayDate()">ClickMe</button>
<p id="demo"></p>
</body>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
function MyMsg()
{
alert("Welcome to JSEvents");
}
</script>
</head>
<body>
<p>Click the button to display the alert Msg ..</p>
<button  onclick="MyMsg()"><img src='html5.png' width=10px height=10px> </button>
<input type='submit' value="ClickMe" onclick="MyMsg()">
<input type='button' value="ClickMe" onclick="MyMsg()" >
</body>

ondblclick Event:
The ondblclick event occurs when the user double-clicks on an element.

Syntax:
In Html
<element ondblclick="SomeJavaScriptCode">

Syntax:
In JavaScript:
object.ondblclick="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script type='text/javascript'>
function MyColor()
{
document.getElementById("col").style.color="#FF0099";
}
</script>
</head>
<body>
<p id="col">Double Click the button to Chage the Color of the Text...!</p>
<button ondblclick="MyColor()">DClickMe</button>
</body>

Example:
<!doctype html>
<head>
<script>
function copyText()
{
document.getElementById("field2").value=document.getElementById("field1").value;
}
</script>
</head>
<body>
Field1: <input type="text" id="field1" value="Hello World!" /><br />
Field2: <input type="text" id="field2" />
<br /><br />
<button ondblclick="copyText()">Copy Text</button>
</body>
		
onload:
The onload event occurs when an object has been loaded. onload is most often used within the <body> element to execute a script once a web page has completely loaded all content (including images, script files, CSS files, etc.).

Syntax
In HTML:
<element onload="SomeJavaScriptCode">

In JavaScript:
object.onload="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script>
function load()
{
alert("Page is loaded");
}
</script>
</head>
<body onload="load()">
<h1>Hello World!</h1>
</body>

Example:
<!doctype html>
<head>
<script>
function loadImage()
{
alert("Image is loaded Successfully");
}
</script>
</head>
<body>
<img src="html5.png" onload="loadImage()" width="100" height="132" />
</body>

onunload Event:
The onunload event occurs once a page has unloaded (or the browser window has been closed). onunload occurs when the user navigates away from the page (by clicking on a link, submitting a form, closing the browser window, etc.)

Syntax
In HTML:
<element onunload="SomeJavaScriptCode">

In JavaScript:
object.onunload="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script>
function bye()
{
alert("Thank you for visiting MySite!!");
}
</script>
</head>
<body onunload="bye()">
<h1>Welcome to my World</h1>
<p>Close this window or press F5 to reload the page.</p>
</body>

onerror Event
The onerror event is triggered if an error occurs while loading an external file (e.g. a document or an image).

Syntax
In HTML:	
<element onerror="SomeJavaScriptCode">

In JavaScript:
object.onerror="SomeJavaScriptCode"

onerror is Supported by the Following HTML Tags:
<img>, <object>, <script>, <style> 

Example:
<!doctype html>
<head>
<script>
function imgError()
{
alert('The image could not be loaded.');
}
</script>
</head>
<body>
<img src="water1.gif" onerror="imgError()">
<p> Image that does not exist, therefore the onerror event occurs.</p>
<p> If Image Existed NO Message displayed</p>
</body>

onmousemove Event:
The onmousemove event occurs when a user moves the mouse pointer over an element.

Syntax
In HTML:
<element onmousemove="SomeJavaScriptCode">

In JavaScript:
object.onmousemove="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script>
function bigImg(x)
{
x.style.height="84px";
x.style.width="84px";
}
function normalImg(x)
{
x.style.height="32px";	
x.style.width="32px";
}
</script>
</head>
<body>
<img onmousemove="bigImg(this)" onmouseout="normalImg(this)" src="html.png" alt="Logo" width="32" height="32" />
</body>

onmouseover and onmouseout:
These two event types will help you to create nice effects with images or even with text as well. The onmouseover event occurs when you bring your mouse over any element and the onmouseout occurs when you take your mouse out from that element.

Syntax
In HTML:
<element onmouseover="SomeJavaScriptCode">

In JavaScript:
object.onmouseover="SomeJavaScriptCode"

Syntax
In HTML:
<element onmouseout="SomeJavaScriptCode">

In JavaScript:
object.onmouseout="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script type="text/javascript">
function over() 
{
alert("Mouse Over");
}
function out() 
{
alert("Mouse Out");
}
</script>
</head>
<body>
<div onmouseover="over()" onmouseout="out()">
<h2> This is inside the division </h2>
</div>
</body>

Example:
<!doctype html>
<body>
<h1 onmouseover="style.color='red'" 
onmouseout="style.color='black'">
Mouse over this text
</h1>
</body>

Example:
<!doctype html>
<body>
<a href="http://www.nareshit.com/" 
onmouseover="document.bgColor='#FFFF00'"
onmouseout="document.bgColor='#FFFFEE'">
Move your mouse over me!
</a>
</body>

onresize Event
The onresize event occurs when the size of an element has changed.

Syntax
In HTML:
<element onresize="SomeJavaScriptCode">

In JavaScript:
object.onresize="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script>
function showMsg()
{
alert("Hi!! changed the size of the Browser Window!");
}
</script>
</head>
<body onresize="showMsg()">
<p>Try to resize the browser window.</p>
</body>

HTML onchange Event:
The onchange attribute fires the moment when the value of the element is changed. The onchange attribute can be used with the <input>, <textarea>, and <select> elements.

Syntax
 <element onchange="script"> 

Attribute Values 
Value	Description
script	The script to be run on onchange

Example:
<!doctype html>
<head>
<script>
function checkField(val)
{
alert("The input value has changed. The new value is: " + val);
}
</script>
</head>
<body>
Enter text: 
<input type="text" name="txt" value="NareshTech" onchange="checkField(this.value)">
<p>Modify the text in the input field, then click outside the field to fire onchange.</p>
</body>

HTML onselect Event
The onselect attribute fires after some text has been selected in an element. The onselect attribute can be used within: 
<input type="file">, <input type="password">, 
<input type="text">, and <textarea>.

Syntax
 <element onselect="script"> 
	
Attribute Values
Value	Description
script	The script to be run on onselect

Examples:
<!doctype html>
<head>
<script>
function showMsg()
{
alert("You have Selected My Text!");
}
</script>
</head>
<body>
Some text: 
<input type="text" value="sraju!!" onselect="showMsg()">
</body>
</html>

Form Events:
onblur:The onblur event occurs when an object loses focus. Onblur is most often used with form validation code (When the user leaves a form field).

Note: The onblur event is the opposite of the onfocus event.

Syntax
In HTML:
<element onblur="SomeJavaScriptCode">

In JavaScript:
object.onblur="SomeJavaScriptCode"

Supported JS objects: 
Document, Window.

Example:
<!doctype html>
<head>
<script>
function upperCase()
{
var x=document.getElementById("fname");
x.value=x.value.toUpperCase();
}
function lowerCase()
{
var x=document.getElementById("fname");
x.value=x.value.toLowerCase();
}
</script>
</head>
<body>
Enter your name: <input type="text" id="fname" onblur="upperCase()" />
</body>

onfocus Event:
The onfocus event occurs when an element gets focus. Onfocus is most often used with <input>, <select>, and <a>.

Note: The onfocus event is the opposite of the onblur event.

Syntax
In HTML:
<element onfocus="SomeJavaScriptCode">

In JavaScript:
object.onfocus="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script type="text/javascript">
function setStyle(x)
{
document.getElementById(x).style.background="yellow";
}
</script>
</head>
<body>
<form action="html5.png" name="myform" id="form1">
<label>First name: </label> <br/>
<input type="text" id="fname" onfocus="setStyle(this.id)" />
<br />
<label>Last name: </label> <br/>
<input type="text" id="lname" onfocus="setStyle(this.id)" /> <br/>
<input type='submit' value="NextPage"/>
<input type='reset' value="Cancel"/>
</form>
</body>
<------------------------------------------------->
<------------------------11th---------------------->

JavaScript - Errors & Exceptions Handling
There are three types of errors in programming: 
(a) Syntax Errors 
(b) Runtime Errors 
(c) Logical Errors:

Syntax errors:
Syntax errors, also called parsing errors, occur at compile time for traditional programming languages, at interpret time for JavaScript.
	
Following example causes a syntax error because it is missing a closing parenthesis.

Example:
<!doctype html>
<head>
<script type="text/javascript">
window.document.write("Hey JS"
</script>
</head>

When a syntax error occurs in JavaScript, only the code contained within the same thread as the syntax error is affected and code in other threads

Example:
<!doctype html>
<head>
<script type='text/javascript'>
document.write("Hello<br/>");
document.write("Welcome to JS<br/>");
document.write("Thank U";
</script>
</head>

Logical Errors/Semantic Errors:
Logical errors can be the most difficult type of errors to track down. These errors are not the result of a syntax or runtime error. Instead, they occur when you make a mistake in the logic that drives your script and you do not get the result you expected.

You can not catch those errors, because it depends on your business requirement what type of logic you want to put in your program.

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var x=100;
var y=10;
var z=x+y/2
document.write("The Value is: ",z)
</script>
</head>

The above script displays '105', to avoid invalid computations, we must use expression in a proper format ie (x+y)/2.

Example:
<script type='text/javascript'>
var x=100;var y=10;
var z=(x+y)/2
document.write("The Value is: ",z)
</script>

Runtime errors:
Runtime errors, also called exceptions, occur during execution (after compilation/ interpretation).

The following example causes a run time error because here syntax is correct but at run time it is trying to call a non existed method:

Example:
<!doctype html>
<head>
<script type="text/javascript">
document.write("Good One");
window.document.writepn("Hello");
</script>
</head>

What is Exception Handling?
An exception is a problem that arises during the execution of a program.
OR
Exception handling is the process of responding to the occurrence, during computation, of exceptions.

The try...catch Statement:
The try...catch statement allows you to test a block of code for errors. The try block contains the code to be run, and the catch block contains the code to be executed if an error occurs.

1 The try statement lets you test a block of code for errors.
2 The catch statement lets you handle the error.
3 The throw statement lets you create custom errors.
4 The finally statement lets you execute code, after try and catch, regardless of the result.

Syntax: 
<script> 
try 
{ 
Code to run [break;] 
}
catch ( e ) 
{ 
Code to run if an exception occurs [break;] 
}
</script>

Examples:
<script>
try{
alrt("hi")
}
catch(e)
{
alert(e.description)
}
alert("hello")
</script>

JavaScript eval() Function
The eval() function evaluates or executes an argument.

Syntax
eval(expression)

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var x=prompt("Enter value  to evalu")
alert(eval(x))
alert("Next")
</script>
</head>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
try
{
var x=prompt("Enter Any Value  to Compute")
alert(eval(x))
}
catch(e)
{
alert("Sorry Alpha-Invalid: " +e.description)
}
alert("Next")
</script>
</head>

The finally Statement
The finally statement lets you execute code, after try and catch, regardless of the result:

Syntax:
try {
    Block of code to try
}
catch(err) {
    Block of code to handle errors
} 
finally {
    Block of code to be executed regardless of the try / catch result
}

Example:
<!doctype html>
<head>
<script type='text/javascript'>
try
{
var x=prompt("Enter Any Value  to Compute")
alert(eval(x))
}
catch(e)
{
alert("Sorry Alpha-Invalid: " +e.description)
}
finally
{
alert("This Block Always Get Executed");
}
alert("Next")
</script>
</head>


The JS Throw Statement
The throw statement allows you to create an exception. If you use this statement together with the try...catch statement, you can control program flow and generate accurate error messages. The exception can be a string, integer, Boolean or an object.

Syntax
throw exception

Example:
<!doctype html>
<body>
<script type="text/javascript">
var x=prompt("Enter Any Number: ","100")
try
{ 
if(x>100)
  {
  throw "Err1";
  }
else if(x<=100)
  {
  throw "Err2";
  }
else if(isNaN(x))
  {
  throw "Err3";
  }
}
catch(err)
{
if(err=="Err1")
  {
  document.write("Error! The value is too high.");
  }
if(err=="Err2")
  {
  document.write("Error! The value is too low.");
  }
if(err=="Err3")
  {
  document.write("Error! The value is not a number.");
  }
}
</script>
</body>

JavaScript Global Functions
JavaScript eval() Function
The eval() function evaluates or executes an argument.

Syntax
eval(expression)

Example:
<!doctype html>
<body>
<script type='text/javascript'>
eval("x=10;y=20;document.write(x*y)");
document.write("<br/>" + eval("2+2"));
document.write("<br/>" + eval(x+17));
</script>
</body>

JavaScript isFinite() function
The isFinite is used to determine whether a specified number is finite or not. isFinite is a top-level function and is not associated with any object.

Syntax
isFinite(number)

Example
<!doctype html>
<body>
<script type='text/javascript'>
document.write(isFinite("Good Morning")+ "<br />");
document.write(isFinite(-9.34)+ "<br />");
document.write(isFinite("2009/01/01")+ "<br />");
document.write(isFinite(15-12)+ "<br />");
</script>
</body>

JavaScript : isNaN() function
The isNaN function is used to determine whether a value is "NaN" (not a number) or not. isNaN is a top-level function and is not associated with any object.

Syntax
isNan(textvalue)

Example
<!doctype html>
<body>
<script type='text/javascript'>
document.write(isNaN("Good Morning")+ "<br />");
document.write(isNaN(-9.34)+ "<br />");
document.write(isNaN("2009/01/01")+ "<br />");
document.write(isNaN(15-12)+ "<br />");
</script>
</body>

JS parseInt and parseFloat:
To convert a string to a number, use the JavaScript functions 
1. parseFloat (for conversion to a floating-point number) or 
2. parseInt (for string-to-integer conversion).

JavaScript parseInt() Function:
The parseInt() function parses a string and returns an integer.

Syntax
parseInt(string)

Parameter	Description
string		Required. The string to be parsed


Example
<!doctype html>
<head>
<script type='text/javascript'>
var x="100";
var y="200";
var z=x+y;
alert("The sum(contanation) of the values are: " +z);
var xyz=parseInt(x)+parseInt(y)
alert('Sum of the values are: ' +xyz)
</script>
</head>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
document.write(parseInt("10") + "<br />");
document.write(parseInt("10.33") + "<br />");
document.write(parseInt("34 45 66") + "<br />");
document.write(parseInt("He was 40") + "<br />");
document.write("<br />");
document.write(parseInt("10",16)+ "<br />");
</script>
</head>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var x=prompt("Enter any value");
var y=prompt("Enter any value")
var z=x+y;
alert("The sum(contanation) of the values are: " +z);
var xyz=parseInt(x)+parseInt(y)
alert('Sum of the values are: ' +xyz)
</script>
</head>

JavaScript parseFloat() Function:
The parseFloat() function parses a string and returns a floating value.

Syntax
parseFloat(string)

Parameter	Description
string		Required. The string to be parsed

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var x="100.25";
var y="200.25";
var z=x+y;
alert("The sum(contanation) of the values are: " +z);
var xyz=parseFloat(x)+parseFloat(y)
alert('Sum of the values are: ' +xyz)
</script>
</head>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
 document.write("<BR>" + parseInt("15"))
 document.write("<BR>" + parseFloat("12.12345"))
 document.write("<BR>" + parseInt("45.00000000"))
 document.write("<BR>" + parseInt("23.348  44.218  55.405"))
 document.write("<BR>" + parseFloat("    55 aardvarks"))
 document.write("<BR>" + parseFloat("Year 2002")) 
</script>
</head>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var x=prompt("Enter any value");
var y=prompt("Enter any value")
var z=x+y;
alert("The sum(contanation) of the values are: " +z);
var xyz=parseFloat(x)+parseFloat(y)
alert('Sum of the values are: ' +xyz)
</script>
</head>
<--------------------------------------------------->
JavaScript - Errors & Exceptions Handling
There are three types of errors in programming: 
(a) Syntax Errors 
(b) Runtime Errors 
(c) Logical Errors:

Syntax errors:
Syntax errors, also called parsing errors, occur at compile time for traditional programming languages, at interpret time for JavaScript.
	
Following example causes a syntax error because it is missing a closing parenthesis.

Example:
<!doctype html>
<head>
<script type="text/javascript">
window.document.write("Hey JS"
</script>
</head>

When a syntax error occurs in JavaScript, only the code contained within the same thread as the syntax error is affected and code in other threads

Example:
<!doctype html>
<head>
<script type='text/javascript'>
document.write("Hello<br/>");
document.write("Welcome to JS<br/>");
document.write("Thank U";
</script>
</head>

Logical Errors/Semantic Errors:
Logical errors can be the most difficult type of errors to track down. These errors are not the result of a syntax or runtime error. Instead, they occur when you make a mistake in the logic that drives your script and you do not get the result you expected.

You can not catch those errors, because it depends on your business requirement what type of logic you want to put in your program.

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var x=100;
var y=10;
var z=x+y/2
document.write("The Value is: ",z)
</script>
</head>

The above script displays '105', to avoid invalid computations, we must use expression in a proper format ie (x+y)/2.

Example:
<script type='text/javascript'>
var x=100;var y=10;
var z=(x+y)/2
document.write("The Value is: ",z)
</script>

Runtime errors:
Runtime errors, also called exceptions, occur during execution (after compilation/ interpretation).

The following example causes a run time error because here syntax is correct but at run time it is trying to call a non existed method:

Example:
<!doctype html>
<head>
<script type="text/javascript">
document.write("Good One");
window.document.writepn("Hello");
</script>
</head>

What is Exception Handling?
An exception is a problem that arises during the execution of a program.
OR
Exception handling is the process of responding to the occurrence, during computation, of exceptions.

The try...catch Statement:
The try...catch statement allows you to test a block of code for errors. The try block contains the code to be run, and the catch block contains the code to be executed if an error occurs.

1 The try statement lets you test a block of code for errors.
2 The catch statement lets you handle the error.
3 The throw statement lets you create custom errors.
4 The finally statement lets you execute code, after try and catch, regardless of the result.

Syntax: 
<script> 
try 
{ 
Code to run [break;] 
}
catch ( e ) 
{ 
Code to run if an exception occurs [break;] 
}
</script>

Examples:
<script>
try{
alrt("hi")
}
catch(e)
{
alert(e.description)
}
alert("hello")
</script>

JavaScript eval() Function
The eval() function evaluates or executes an argument.

Syntax
eval(expression)

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var x=prompt("Enter value  to evalu")
alert(eval(x))
alert("Next")
</script>
</head>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
try
{
var x=prompt("Enter Any Value  to Compute")
alert(eval(x))
}
catch(e)
{
alert("Sorry Alpha-Invalid: " +e.description)
}
alert("Next")
</script>
</head>

The finally Statement
The finally statement lets you execute code, after try and catch, regardless of the result:

Syntax:
try {
    Block of code to try
}
catch(err) {
    Block of code to handle errors
} 
finally {
    Block of code to be executed regardless of the try / catch result
}

Example:
<!doctype html>
<head>
<script type='text/javascript'>
try
{
var x=prompt("Enter Any Value  to Compute")
alert(eval(x))
}
catch(e)
{
alert("Sorry Alpha-Invalid: " +e.description)
}
finally
{
alert("This Block Always Get Executed");
}
alert("Next")
</script>
</head>


The JS Throw Statement
The throw statement allows you to create an exception. If you use this statement together with the try...catch statement, you can control program flow and generate accurate error messages. The exception can be a string, integer, Boolean or an object.

Syntax
throw exception

Example:
<!doctype html>
<body>
<script type="text/javascript">
var x=prompt("Enter Any Number: ","100")
try
{ 
if(x>100)
  {
  throw "Err1";
  }
else if(x<=100)
  {
  throw "Err2";
  }
else if(isNaN(x))
  {
  throw "Err3";
  }
}
catch(err)
{
if(err=="Err1")
  {
  document.write("Error! The value is too high.");
  }
if(err=="Err2")
  {
  document.write("Error! The value is too low.");
  }
if(err=="Err3")
  {
  document.write("Error! The value is not a number.");
  }
}
</script>
</body>

JavaScript Global Functions
JavaScript eval() Function
The eval() function evaluates or executes an argument.

Syntax
eval(expression)

Example:
<!doctype html>
<body>
<script type='text/javascript'>
eval("x=10;y=20;document.write(x*y)");
document.write("<br/>" + eval("2+2"));
document.write("<br/>" + eval(x+17));
</script>
</body>

JavaScript isFinite() function
The isFinite is used to determine whether a specified number is finite or not. isFinite is a top-level function and is not associated with any object.

Syntax
isFinite(number)

Example
<!doctype html>
<body>
<script type='text/javascript'>
document.write(isFinite("Good Morning")+ "<br />");
document.write(isFinite(-9.34)+ "<br />");
document.write(isFinite("2009/01/01")+ "<br />");
document.write(isFinite(15-12)+ "<br />");
</script>
</body>

JavaScript : isNaN() function
The isNaN function is used to determine whether a value is "NaN" (not a number) or not. isNaN is a top-level function and is not associated with any object.

Syntax
isNan(textvalue)

Example
<!doctype html>
<body>
<script type='text/javascript'>
document.write(isNaN("Good Morning")+ "<br />");
document.write(isNaN(-9.34)+ "<br />");
document.write(isNaN("2009/01/01")+ "<br />");
document.write(isNaN(15-12)+ "<br />");
</script>
</body>

JS parseInt and parseFloat:
To convert a string to a number, use the JavaScript functions 
1. parseFloat (for conversion to a floating-point number) or 
2. parseInt (for string-to-integer conversion).

JavaScript parseInt() Function:
The parseInt() function parses a string and returns an integer.

Syntax
parseInt(string)

Parameter	Description
string		Required. The string to be parsed


Example
<!doctype html>
<head>
<script type='text/javascript'>
var x="100";
var y="200";
var z=x+y;
alert("The sum(contanation) of the values are: " +z);
var xyz=parseInt(x)+parseInt(y)
alert('Sum of the values are: ' +xyz)
</script>
</head>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
document.write(parseInt("10") + "<br />");
document.write(parseInt("10.33") + "<br />");
document.write(parseInt("34 45 66") + "<br />");
document.write(parseInt("He was 40") + "<br />");
document.write("<br />");
document.write(parseInt("10",16)+ "<br />");
</script>
</head>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var x=prompt("Enter any value");
var y=prompt("Enter any value")
var z=x+y;
alert("The sum(contanation) of the values are: " +z);
var xyz=parseInt(x)+parseInt(y)
alert('Sum of the values are: ' +xyz)
</script>
</head>

JavaScript parseFloat() Function:
The parseFloat() function parses a string and returns a floating value.

Syntax
parseFloat(string)

Parameter	Description
string		Required. The string to be parsed

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var x="100.25";
var y="200.25";
var z=x+y;
alert("The sum(contanation) of the values are: " +z);
var xyz=parseFloat(x)+parseFloat(y)
alert('Sum of the values are: ' +xyz)
</script>
</head>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
 document.write("<BR>" + parseInt("15"))
 document.write("<BR>" + parseFloat("12.12345"))
 document.write("<BR>" + parseInt("45.00000000"))
 document.write("<BR>" + parseInt("23.348  44.218  55.405"))
 document.write("<BR>" + parseFloat("    55 aardvarks"))
 document.write("<BR>" + parseFloat("Year 2002")) 
</script>
</head>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var x=prompt("Enter any value");
var y=prompt("Enter any value")
var z=x+y;
alert("The sum(contanation) of the values are: " +z);
var xyz=parseFloat(x)+parseFloat(y)
alert('Sum of the values are: ' +xyz)
</script>
</head>
<----------------------------------------------------->
<<<<<<<<<<<<<<<<<<<<<<<<<<<12th>>>>>>>>>>>>>>>>>>>>>>
JavaScript Objects Introduction:
JavaScript is an Object Based Programming language. An Object Based Programming language allows you to define your own objects and make your own variable types. An object has properties and methods.

Properties: Properties are the values associated with an object.
Example:
length	Width	Height	Name

Methods: Methods are the actions that can be performed on objects.
Open()	Close()	Resize()

Example:
<!doctype html>
<head>
<script type='text/javascript'>
person=new Object();
person.name='Ram';
person.age=30;
person.gender='male';
person.height=6;
document.write(person.name+' is '+person.age+' years old, '+person.gender+', and '+person.height+' foot tall.');
</script>
</head>

NOTE:
In the above example object name repeated many times, to-overcome that drawback JS has 'with' keyword..!!

with
There is a keyword associated with an object, which is 'with'. It creates a kind of halfway reference. we can drop the repeated references to 'person', because with (person) has already made the reference for us.

Syntax:
with (Object)
{
Statements;
Statements;
Statements;
}

Example:
<!doctype html>
<head>
<script type='text/javascript'>
person=new Object();
with (person) 
{
name='Ram';
age=30;
gender='male';
height=6;
document.write(name+' is '+age+' years old, '+gender+', and '+height+' foot tall.');
}
</script>
</head>

JavaScript and HTML DOM:(Document Object Model)
1 JavaScript Objects:
2 Browser Objects

JavaScript Objects:
    Array object	    Boolean object
    Date object	    Math object
    String object	    Number object    RegExp object
    
Browser Objects: 
    Window object	    Navigator object
    Screen object	    History object	    Location object

JavaScript Array
The Array object is used to store multiple values in a single variable

The following points should always be remembered when using arrays in JavaScript:
1. The array is a special type of variable.
2.Values are stored into an array by using the array name and by stating the location in the array you wish to store the value in brackets. 
Example: myArray[2] = "Hello World";
3. Values in an array are accessed by the array name and location of the value. Example: myArray[2];
4. JavaScript has built-in functions for arrays

Creating a JavaScript Array
Creating an array is slightly different from creating a normal variable. Because JavaScript has variables and properties associated with arrays, you have to use a special function to create a new array.

Create an Array
An array can be created in three ways.
1 Literal:
var myNames=[items];
2 Regular:
var myNames=new Array();
3 Condenced:
var myNames=new Array(items);

Example:
<!doctype html>
<head>
<script type='text/javascript'>
//Literal Way Array Declaration
var MyArr=['html5','css3','js','jQ','ajs'];
document.write("The Length of An Array is: " +MyArr.length);
document.write("<br>");
document.write("Number of Elements in an Array is: " +MyArr.length);
</script>
</head>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
function MyArrayLen()
{
//Literal Way Array Declaration with Function
var MyArr=['html5','css3','js','jQ','ajs'];
document.write("The Length of An Array is: " +MyArr.length);
document.write("<br>");
document.write("Number of Elements in an Array is: " +MyArr.length);
}
</script>
</head>
<body>
<p>Click the button to display the array Length ... </p>
<button onclick="MyArrayLen()"> Click_Array </button>
</body>

2: Regular:
var myNames=new Array();
myNames[0]="Ravi";      
myNames[1]="Smith";
myNames[2]="Raju";

Example:
<!doctype html>
<head>
<script type='text/javascript'>
//Regular Way Array Declaration
var MyArr=new Array();
MyArr[0]='html5';
MyArr[1]='css3';
MyArr[2]='js';
MyArr[3]='jQ';
MyArr[4]='ajs';
MyArr[5]='ajs';
document.write("The Length of An Array is: " +MyArr.length);
document.write("<br>");
document.write("Number of Elements in an Array is: " +MyArr.length);
</script>
</head>

3: Condensed:
var myNames=new Array("Ravi","Smith","Raju");

Example:
<!doctype html>
<head>
<script type='text/javascript'>
//Condensed Way Array Declaration
var MyArr=new Array('html5','css3','js','jQ','ajs');
document.write("The Length of An Array is: " +MyArr.length);
document.write("<br>");
document.write("Number of Elements in an Array is: " +MyArr.length);
</script>
</head>

Array Methods and Properties
The Array object has predefined properties and methods:
var x=myNames.length      // the number of elements in myNames
var y=myNames.indexOf("Raju")   // the index position of "Raju"

Example:
<!doctype html>
<html>
<body>
<script>
var i;
var mynames = new Array();
mynames[0] = "Ravi";
mynames[1] = "sai";
mynames[2] = "Raju";
for (i=0;i<mynames.length;i++)
{
document.write(mynames[i] + "<br />");
}
</script>
</body>

Example:
<!doctype html>
<script>
var myArray = new Array();
myArray[0] = "Football";
myArray[1] = "Baseball";
myArray[2] = "Cricket";
document.write(myArray[0] + myArray[1] + myArray[2]);
</script>

JavaScript Array Sorting
Imagine that you wanted to sort an array alphabetically before you wrote the array to the browser. Well, this code has already been written and can be accessed by using the Array's sort method.

Example:
<script>
var x= new Array();
x[0] = "Football";
x[1] = "Baseball";
x[2] = "Cricket";
x.sort();
document.write(x[0] + x[1] + x[2]);
</script>

Example:
<!doctype html>
<script>
function myFunction()
{
var names = ["raju", "nit", "ramu", "scott"];
var x=document.getElementById("demo");
x.innerHTML=names.length;
}
</script>
<body>
<p id="demo">Click the button to create an array, then display it's length</p>
<button onclick="myFunction()">Length</button>
</body>

Example:
<!doctype html>
<body>
<script>
var fruits = ["Banana", "Orange", "Apple", "Mango"];
function myFunction()
{
fruits.reverse();
var x=document.getElementById("demo");
x.innerHTML=fruits;
}
</script>
<p id="demo">Click the button to reverse the order of the elements in the array.</p>
<button onclick="myFunction()">Display</button>
</body>

JavaScript pop() Method:
The pop() method removes the last element of an array, and returns that element.
Note: This method changes the length of an array.
Note: To remove the first element of an array, use the shift() method.

Syntax: array.pop()

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var techs = ["TeraData", "BigData", "Hadoop", "Spark"];
function myFunction()
{
techs.pop();
var x=document.getElementById("course");
x.innerHTML=techs;
}
</script>
<body>
<p id="course">Click the button to remove the last array element.</p>
<button onclick="myFunction()">Click_Tech</button>
</body>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
arr=['smiley.jpg','fish.jpg','fish1.gif', 'nature.jpg', 'nature1.jpg', 'nature2.pg']
i=0;
function funpre()
{
i--
fun2()
}
function funnext()
{
i++
fun2()
}
function fun2()
{
document.getElementById('img1').src="img/"+arr[i]
}
</script>
</head>
<body>
<img id='img1' width='200px' height="200px" src='img/smiley.jpg'>
<br>
<input type='button' value='Next' onclick='funnext()'>
<input type='button' value='Previous' onclick='funpre()'>
</body>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
arr=['fish.jpg','fish1.gif', 'nature.jpg', 'nature1.jpg','butterfly.gif',"bird.gif"]
i=0;
function fun1()
{
i++
if(i==6)
{
alert("No more images")
}
else
{
document.getElementById('img1').src="img/"+arr[i];
}
}
</script>
<body>
<img src="img/fish.jpg" width="300px" height="250px" id="img1">
<br>
<input type="button" value=" NEXT" onclick="fun1()">
</body>

JavaScript Boolean Object
The Boolean object represents two values, either "true" or "false". If value parameter is omitted or is 0, -0, null, false, NaN, undefined, or the empty string (""), the object has an initial value of false.

Syntax
Use the following syntax to create a boolean object.
var val = new Boolean(value);

Example1:
<!doctype html>
<head>
<script>
function myFunction() 
{
document.getElementById("demo").innerHTML = Boolean(10 > 9);
}
</script>
</head>
<body>
<p id='demo'>Display the value of Boolean(10 > 9):</p>
<button onclick="myFunction()">ClickMe</button>
</body>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var b1=new Boolean(0);
var b2=new Boolean(1);
var b3=new Boolean("");
var b4=new Boolean(null);
var b5=new Boolean(NaN);
document.write("0 is boolean "+ b1 +"<br />");
document.write("1 is boolean "+ b2 +"<br />");
document.write("An empty string is boolean "+ b3 + "<br />");
document.write("null is boolean "+ b4+ "<br />");
document.write("NaN is boolean "+ b5 +"<br />");
</script>
</head>

JavaScript - The Date Object
The Date object is a datatype built into the JavaScript language. Date objects are created with the new Date( ). Once a Date object is created, a number of methods allows you to operate on it. Most methods simply allows you to get and set the year, month, day, hour, minute, second, and millisecond fields of the object, using either local time or UTC.

There are four ways of instantiating a date:
var x = new Date();
var x = new Date(milliseconds);
var x = new Date(dateString);
var x = new Date(year, month, day, hours, minutes, seconds, milliseconds); 

Syntax:Date()

Example:
<!doctype html>
<head>
<script type="text/javascript">
   var dt = Date();
   document.write("Date and Time : " + dt ); 
</script>
</head>
